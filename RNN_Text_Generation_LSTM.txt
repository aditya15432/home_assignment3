{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "047dbd48",
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "\n",
    "# 1. Load dataset (smaller slice for speed)\n",
    "url = \"https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\"\n",
    "text_path = tf.keras.utils.get_file(\"shakespeare.txt\", url)\n",
    "text = open(text_path, 'rb').read().decode(encoding='utf-8')\n",
    "text = text[:100000]  # use only first 100k chars\n",
    "print(f\"Length of text: {len(text)} characters\")\n",
    "\n",
    "# 2. Preprocess\n",
    "vocab = sorted(set(text))\n",
    "vocab_size = len(vocab)\n",
    "char2idx = {u:i for i, u in enumerate(vocab)}\n",
    "idx2char = np.array(vocab)\n",
    "text_as_int = np.array([char2idx[c] for c in text])\n",
    "\n",
    "# 3. Prepare training data\n",
    "seq_length = 100\n",
    "char_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)\n",
    "sequences = char_dataset.batch(seq_length+1, drop_remainder=True)\n",
    "\n",
    "def split_input_target(chunk):\n",
    "    return chunk[:-1], chunk[1:]\n",
    "\n",
    "dataset = sequences.map(split_input_target).shuffle(10000).batch(32, drop_remainder=True)\n",
    "\n",
    "# 4. Build the model\n",
    "embedding_dim = 128\n",
    "rnn_units = 256\n",
    "\n",
    "def build_model(vocab_size, embedding_dim, rnn_units):\n",
    "    return tf.keras.Sequential([\n",
    "        tf.keras.layers.Embedding(vocab_size, embedding_dim),\n",
    "        tf.keras.layers.LSTM(rnn_units, return_sequences=True),\n",
    "        tf.keras.layers.Dense(vocab_size)\n",
    "    ])\n",
    "\n",
    "model = build_model(vocab_size, embedding_dim, rnn_units)\n",
    "model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True))\n",
    "\n",
    "# 5. Train the model\n",
    "model.fit(dataset, epochs=2)\n",
    "\n",
    "# 6. Text generation function\n",
    "def generate_text(model, start_string, num_generate=500, temperature=1.0):\n",
    "    input_eval = tf.expand_dims([char2idx[s] for s in start_string], 0)\n",
    "    text_generated = []\n",
    "\n",
    "    for _ in range(num_generate):\n",
    "        predictions = model(input_eval)\n",
    "        predictions = tf.squeeze(predictions, 0)\n",
    "        predictions = predictions / temperature\n",
    "        predicted_id = tf.random.categorical(predictions, num_samples=1)[-1, 0].numpy()\n",
    "        input_eval = tf.expand_dims([predicted_id], 0)\n",
    "        text_generated.append(idx2char[predicted_id])\n",
    "\n",
    "    return start_string + ''.join(text_generated)\n",
    "\n",
    "# 7. Generate text with different temperatures\n",
    "print(\"\\n--- Generated text (temperature=1.0) ---\")\n",
    "print(generate_text(model, \"ROMEO: \", temperature=1.0))\n",
    "\n",
    "print(\"\\n--- Generated text (temperature=0.5) ---\")\n",
    "print(generate_text(model, \"ROMEO: \", temperature=0.5))\n",
    "\n",
    "print(\"\\n--- Generated text (temperature=1.5) ---\")\n",
    "print(generate_text(model, \"ROMEO: \", temperature=1.5))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
